*gh.txt*	Vim/Neovim plugin for GitHub

Author: skanehira <sho19921005@gmail.com>
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS					*gh-contents*

INTRODUCTION			|gh-introduction|
USAGE				|gh-usage|
INTERFACE			|gh-interface|
  VARIABLES			  |gh-variables|
  BUFFER			  |gh-buffers|
  KEY-MAPPINGS			  |gh-key-mappings|
  FUNCTIONS			  |gh-functions|
TODO				|gh-todo|
CHANGELOG			|gh-changelog|


==============================================================================
INTRODUCTION					*gh-introduction*

*gh.vim* is a Vim/Neovim plugin for GitHub

Latest version:
https://github.com/skanehira/gh.vim


==============================================================================
USAGE						*gh-usage*



==============================================================================
INTERFACE					*gh-interface*

------------------------------------------------------------------------------
VARIABLES					*gh-variables*

g:gh_token					*g:gh_token*
	GitHub personal access token.
	please reference https://git.io/JJyrT

g:gh_open_issue_on_create			*g:gh_open_issue_on_create*
	open issue in browser on created.

------------------------------------------------------------------------------
BUFFER							*gh-buffer*

gh://:owner/:repo/issues[?state=open&..]		*gh-buffer-issue-list*
	show :owner/:repo issues.
	you can use query parameters(https://git.io/JUzlg)

gh://:owner/:repo/issues/:number			*gh-buffer-issue-edit*
	show issue contents and can edit it.
	can use |:w| to update contents and title.

gh://:owner/:repo/:branch/issues/new			*gh-buffer-issue-new*
	create new issue.
	at first, you have to input issue title at cmdline.
	if repository has template, can use it to create issue.
	use |:w| to create issue.

gh://:owner/:repo/issues/:number/comments[?page=1&...]	*gh-buffer-issue-comment-list*
	show issue comments.
	you can use query parameters(https://git.io/JUKxD)

gh://:owner/:repo/issues/:number/comments/new		*gh-buffer-issue-comment-new*
	create new issue comment.

gh://:owner/:repo/issues/:number/comments/edit		*gh-buffer-issue-comment-edit*
	edit issue comment.

gh://:owner/:repo/pulls[?state=open&...]		*gh-buffer-pull-list*
	show :owner/:repo pull reuqests.
	you can use query parameters(https://git.io/JUzl5)

gh://:owner/:repo/pulls/:number/diff			*gh-buffer-pull-diff*
	show pull request diff.

gh://:owner/repos[?sort=created&...]			*gh-buffer-repo-list*
	show :owner repositories.
	you can use query parameters(https://git.io/JUzlo)

	when :owner is `user`, show authenticated user repositories.
	this can show your private/orgnization repositories.
	you can use query parameters(https://git.io/JUzli)

gh://:owner/:repo/readme				*gh-buffer-repo-readme*
	show repository readme.

gh://:owner/:repo/projects				*gh-buffer-project-list*
	show :owner/:repo projects.
	if :owner is 'orgs', :repo must be specific organization name

gh://projects/:id/columns				*gh-buffer-project-column-list*
	show project columns.
	:id is project id, not project number.

gh://:owner/:repo/actions[?status=success&...]		*gh-buffer-action-list*
	show :owner/:repo GitHub Actions workflows/steps.
	you can use query parameters(https://git.io/JkNZB)

gh://:owner/:repo/[:branch|:tree_sha]/files[?recache=1]	*gh-buffer-file-list*
	show `:owner/:repo/[:branch|:tree_sha]` file tree.
	`:tree_sha` is commit hash and `:branch` is branch name.
	when `recache` is 1, file tree's cache will be cleard.

gh://bookmarks						*gh-buffer-bookmark-list*
	show your buffer bookmarks.
	you can edit this buffer and use |:w| to save bookmarks.

------------------------------------------------------------------------------
KEY-MAPPINGS					*gh-key-mappings*

you can use gh#map#add({buffer}, {mode}, {lhs}, {rhs}) to set key mappings.
{buffer} can specific |gh-buffer|.
{mode} can specific |map-modes|.
>
  function! s:gh_map_add() abort
    if !exists('g:loaded_gh')
      return
    endif
    call gh#map#add('gh-buffer-issue-list', 'nnoremap', 'x', ':bw!<CR>')
    call gh#map#add('gh-buffer-issue-list', 'map', 'h', '<Plug>(gh_issue_list_prev)')
    call gh#map#add('gh-buffer-issue-list', 'map', 'l', '<Plug>(gh_issue_list_next)')
  endfunction

  augroup gh-maps
    au!
    au VimEnter * call <SID>gh_map_add()
  augroup END
<
<Plug>(gh_repo_list_prev)			*<Plug>(gh_repo_list_prev)*
	show previous page of repository list

<Plug>(gh_repo_list_next)			*<Plug>(gh_repo_list_next)*
	show next page of repository list

<Plug>(gh_repo_open_browser)			*<Plug>(gh_repo_open_browser)*
	open repository on browser

<Plug>(gh_repo_show_readme)			*<Plug>(gh_repo_show_readme)*
	show radme of repository

<Plug>(gh_pull_list_prev)			*<Plug>(gh_pull_list_prev)*
	show previous page of pull reuqest list

<Plug>(gh_pull_list_next)			*<Plug>(gh_pull_list_next)*
	show next page of pull reuqest list

<Plug>(gh_pull_open_browser)			*<Plug>(gh_pull_open_browser)*
	open pull request on browser

<Plug>(gh_pull_diff)				*<Plug>(gh_pull_diff)*
	show diff of pull request

<Plug>(gh_pull_url_yank)			*<Plug>(gh_pull_url_yank)*
	yank pull request url

<Plug>(gh_issue_list_prev)			*<Plug>(gh_issue_list_prev)*
	show previous page of issue list

<Plug>(gh_issue_list_next)			*<Plug>(gh_issue_list_next)*
	show next page of issue list

<Plug>(gh_issue_open_browser)			*<Plug>(gh_issue_open_browser)*
	open issue on browser

<Plug>(gh_issue_edit)				*<Plug>(gh_issue_edit)*
	edit issue

<Plug>(gh_issue_close)				*<Plug>(gh_issue_close)*
	close issue

<Plug>(gh_issue_open)				*<Plug>(gh_issue_open)*
	open issue

<Plug>(gh_issue_url_yank)			*<Plug>(gh_issue_url_yank)*
	yank issue url

<Plug>(gh_issue_toggle_preview)			*<Plug>(gh_issue_toggle_preview)*
	toggle previewing issue contents

<Plug>(gh_issue_preview_move_down)		*<Plug>(gh_issue_preview_move_down)*
	move down cursorline in preview

<Plug>(gh_issue_preview_move_up)		*<Plug>(gh_issue_preview_move_up)*
	move up cursorline in preview

<Plug>(gh_issue_comment_list_next)              *<Plug>(gh_issue_comment_list_next)*
	show next page of issue comment list

<Plug>(gh_issue_comment_list_prev)		*<Plug>(gh_issue_comment_list_prev)*
	show previous page of issue comment list

<Plug>(gh_issue_comment_open_browser)		*<Plug>(gh_issue_comment_open_browser)*
	open issue on browser

<Plug>(gh_issue_comment_new)			*<Plug>(gh_issue_comment_new)*
	create new issue comment

<Plug>(gh_issue_comment_url_yank)		*<Plug>(gh_issue_comment_url_yank)*
	yank issue comment url

<Plug>(gh_issue_comment_open_on_issue)		*<Plug>(gh_issue_comment_open_on_issue)*
	open issue comments on |gh-buffer-issue-edit|

<Plug>(gh_project_open_browser)			*<Plug>(gh_project_open_browser)*
	open project on browser

<Plug>(gh_project_open)				*<Plug>(gh_project_open)*
	show project columns

<Plug>(gh_project_url_yank)			*<Plug>(gh_project_url_yank)*
	yank project url

<Plug>(gh_projects_card_open_browser)		*<Plug>(gh_projects_card_open_browser)*
	open project card on browser

<Plug>(gh_projects_card_edit)			*<Plug>(gh_projects_card_edit)*
	edit project card
	current only support content type 'Issue'

<Plug>(gh_projects_card_move)			*<Plug>(gh_projects_card_move)*
	move project card to current column

<Plug>(gh_projects_card_url_yank)		*<Plug>(gh_projects_card_url_yank)*
	yank cards url

<Plug>(gh_projects_card_close)			*<Plug>(gh_projects_card_close)*
	close card
	current only supported content type 'Issue'

<Plug>(gh_projects_card_open)			*<Plug>(gh_projects_card_open)*
	open card
	current only supported content type 'Issue'

<Plug>(gh_bookmark_open)			*<Plug>(gh_bookmark_open)*
	open buffer

<Plug>(gh_actions_open_browser)			*<Plug>(gh_actions_open_browser)*
	open action's workflow/step on browser

<Plug>(gh_actions_yank_url)			*<Plug>(gh_actions_yank_url)*
	yank action's workflow/stop url

<Plug>(gh_actions_open_logs)			*<Plug>(gh_actions_open_logs)*
	open selected actions's job logs in Vim terminal

<Plug>(gh_files_edit)				*<Plug>(gh_files_edit)*
	open selected file

<Plug>(gh_files_yank_url)			*<Plug>(gh_files_yank_url)*
	yank selected files.

<Plug>(gh_files_open_browser)			*<Plug>(gh_files_open_browser)*
	open selected files in browser.

<Plug>(gh_file_yank_url)			*<Plug>(gh_file_yank_url)*
	yank selected file's line in browser.

<Plug>(gh_file_open_browser)			*<Plug>(gh_file_open_browser)*
	open selected file's line in browser.

						*gh-default-key-mappings*

default mappings
{buffer}			{mode}		{lhs}		{rhs}
-----------------------------------------------------------------------------------------------
|gh-buffer-issue-list|		`normal`	<C-h>		<Plug>(gh_issue_list_prev)
				`normal`	<C-l>		<Plug>(gh_issue_list_next)
				`normal`	<C-o>		<Plug>(gh_issue_open_browser)
				`normal`	ghe		<Plug>(gh_issue_edit)
				`normal`	ghc		<Plug>(gh_issue_close)
				`normal`	gho		<Plug>(gh_issue_open)
				`normal`	ghm		<Plug>(gh_issue_open_comment)
				`normal`	ghy		<Plug>(gh_issue_url_yank)
				`normal`	ghp		<Plug>(gh_issue_toggle_preview)
				`normal`	<C-n>		<Plug>(gh_issue_preview_move_down)
				`normal`	<C-p>		<Plug>(gh_issue_preview_move_up)
|gh-buffer-issue-edit|		`normal`	ghm		<Plug>(gh_issue_comment_open_on_issue)
|gh-buffer-issue-comment-list|	`normal`	<C-h>		<Plug>(gh_issue_comment_list_prev)
				`normal`	<C-l>		<Plug>(gh_issue_comment_list_next)
				`normal`	<C-o>		<Plug>(gh_issue_comment_open_browser)
				`normal`	ghn		<Plug>(gh_issue_comment_new)
				`normal`	ghy		<Plug>(gh_issue_comment_url_yank)
|gh-buffer-pull-list|		`normal`	<C-h>		<Plug>(gh_pull_list_prev)
				`normal`	<C-l>		<Plug>(gh_pull_list_next)
				`normal`	<C-o>		<Plug>(gh_pull_open_browser)
				`normal`	ghd		<Plug>(gh_pull_diff)
				`normal`	ghy		<Plug>(gh_pull_url_yank)
|gh-buffer-repo-list|		`normal`	<C-h>		<Plug>(gh_repo_list_prev)
				`normal`	<C-l>		<Plug>(gh_repo_list_next)
				`normal`	<C-o>		<Plug>(gh_repo_open_browser)
				`normal`	gho		<Plug>(gh_repo_show_readme)
|gh-buffer-project-list|	`normal`	<CR>		<Plug>(gh_project_open)
				`normal`	<C-o>		<Plug>(gh_project_open_browser)
				`normal`	ghy		<Plug>(gh_project_url_yank)
|gh-buffer-project-column-list|	`normal`	<C-o>		<Plug>(gh_projects_card_open_browser)
				`normal`	ghe		<Plug>(gh_projects_card_edit)
				`normal`	ghm		<Plug>(gh_projects_card_move)
				`normal`	ghy		<Plug>(gh_projects_card_url_yank)
				`normal`	ghc		<Plug>(gh_projects_card_close)
				`normal`	gho		<Plug>(gh_projects_card_open)
|gh-buffer-bookmark-list|	`normal`	gho		<Plug>(gh_bookmark_open)
|gh-buffer-action-list|		`normal`	<C-o>		<Plug>(gh_actions_open_browser)
				`normal`	ghy		<Plug>(gh_actions_yank_url)
				`normal`	gho		<Plug>(gh_actions_open_logs)
|gh-buffer-file-list|		`normal`	ghe		<Plug>(gh_files_edit)
				`normal`	ghy		<Plug>(gh_files_yank_url)
				`normal`	<C-o>		<Plug>(gh_files_open_browser)
|gh-buffer-file|		`visual`	ghy		<Plug>(gh_file_yank_url)
				`visual`	<C-o>		<Plug>(gh_file_open_browser)

------------------------------------------------------------------------------
FUNCTIONS					*gh-functions*


==============================================================================
TODO						*gh-todo*



==============================================================================
CHANGELOG					*gh-changelog*


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
